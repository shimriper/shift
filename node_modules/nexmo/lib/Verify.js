"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Verify = function () {
  _createClass(Verify, null, [{
    key: "PATH",
    get: function get() {
      return "/verify{action}/json";
    }
  }, {
    key: "ERROR_MESSAGES",
    get: function get() {
      return {
        verifyValidation: "Missing Mandatory fields (number and/or brand)",
        checkVerifyValidation: "Missing Mandatory fields (request_id and/or code)",
        controlVerifyValidation: "Missing Mandatory fields (request_id and/or cmd-command)",
        searchVerifyValidation: "Missing Mandatory fields (request_id or request_ids)"
      };
    }
    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Addition Verify options.
     */

  }]);

  function Verify(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Verify);

    this.creds = credentials;
    this.options = options;
  }

  /**
   * TODO: document
   */


  _createClass(Verify, [{
    key: "request",
    value: function request(inputParams, callback) {
      if (!inputParams.number || !inputParams.brand) {
        _Utils2.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.verifyValidation));
      } else {
        inputParams["api_key"] = this.creds.apiKey;
        inputParams["api_secret"] = this.creds.apiSecret;
        this.options.httpClient.request({
          host: this.options.apiHost || "api.nexmo.com",
          path: _Utils2.default.createPathWithQuery("" + Verify.PATH.replace("{action}", ""), inputParams)
        }, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "check",
    value: function check(inputParams, callback) {
      if (!inputParams.request_id || !inputParams.code) {
        _Utils2.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.checkVerifyValidation));
      } else {
        inputParams["api_key"] = this.creds.apiKey;
        inputParams["api_secret"] = this.creds.apiSecret;
        this.options.httpClient.request({
          host: this.options.apiHost || "api.nexmo.com",
          path: _Utils2.default.createPathWithQuery("" + Verify.PATH.replace("{action}", "/check"), inputParams)
        }, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "control",
    value: function control(inputParams, callback) {
      if (!inputParams.request_id || !inputParams.cmd) {
        _Utils2.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.controlVerifyValidation));
      } else {
        inputParams["api_key"] = this.creds.apiKey;
        inputParams["api_secret"] = this.creds.apiSecret;
        this.options.httpClient.request({
          host: this.options.apiHost || "api.nexmo.com",
          path: _Utils2.default.createPathWithQuery("" + Verify.PATH.replace("{action}", "/control"), inputParams)
        }, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "search",
    value: function search(requestIds, callback) {
      var requestIdParam = {};
      if (!requestIds) {
        _Utils2.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.searchVerifyValidation));
      } else {
        if (Array.isArray(requestIds)) {
          if (requestIds.length === 1) {
            requestIdParam.request_id = requestIds;
          } else {
            requestIdParam.request_ids = requestIds;
          }
        } else {
          requestIdParam.request_id = requestIds;
        }
        requestIdParam["api_key"] = this.creds.apiKey;
        requestIdParam["api_secret"] = this.creds.apiSecret;
        this.options.httpClient.request({
          host: this.options.apiHost || "api.nexmo.com",
          path: _Utils2.default.createPathWithQuery("" + Verify.PATH.replace("{action}", "/search"), requestIdParam)
        }, callback);
      }
    }
  }]);

  return Verify;
}();

exports.default = Verify;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,